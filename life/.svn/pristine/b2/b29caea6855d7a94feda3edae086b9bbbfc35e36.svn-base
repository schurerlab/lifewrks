package edu.miami.ccs.life;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Properties;
import java.util.Set;

import javax.servlet.ServletException;
//import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.JSONException;
import org.json.JSONObject;



/**
@author ndatar

*/

//@WebServlet(description = "Allows the user to search various assays generated by LINCS Centers and get the meta-information for assays", urlPatterns = { "/assayinfo" })

public class AssayInfo extends HttpServlet {
	

	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
						  throws ServletException, IOException {
		
		this.doGet(req, resp);
	}
	
	protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
	
		PrintWriter out = response.getWriter();
		
		try{
		
			String jsonStr;
			
			jsonStr = makeAssayResults(request);
			System.out.println(jsonStr);
			int spacesToIndentEachLevel = 2;
			
			out.print(new JSONObject(jsonStr).toString(spacesToIndentEachLevel).replaceAll("null,", ""));
		   
		}
		catch(Exception e)
		{
			out.print("{\"error\":\"no data found\"}");
		}
	
		
	}

	
	private String makeAssayResults(HttpServletRequest request)
	{
		
		JSONObject jsonObj = null;
		StringBuffer jsonStr = new StringBuffer("");
		
		String query = request.getParameter("searchTerm");
		
		String fields = "AssayType,AssayFormat,AssayTypeName,Source,Description,SourceLink";
		String rows = null;
		String start = null;
		if(request.getParameter("limit") != null)
			rows = request.getParameter("limit");
		if(request.getParameter("skip") != null)
			start = request.getParameter("skip");
		String[] facets = {"ProteinName",
		                   "SmallMoleculeName",
		                   "CellLineName",
		                   "GeneName",
		                   "PhosphoProteinName",
		                   "ShRnaName",
		                   "CdnaName"};
		String[] groups = {"AssayTypeName"};
		
		if(query.lastIndexOf(" AND ") == query.length()-5)
			query = query.substring(0, query.length()-5);
			query="{!lucene q.op=AND df=text}"+query;
		SolrShield sm = new SolrShield("http://life.ccs.miami.edu/participant-solr", query, fields, rows, start, facets, groups);
		try {
			jsonObj = sm.getGroupFacetResults();
			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
		}

		
		return readPropertyFile(jsonObj);
	}
	
	 public static String readPropertyFile(JSONObject jsonObj) {
		 Properties prop = new Properties();
		 InputStream input;
		 Set<String> propertyNames;
		 String jsonStr = jsonObj.toString();
		 try 
		 {		 
			 input = AssayInfo.class.getResourceAsStream("/assay-search.properties");
			 prop.load(input);			 
			 propertyNames = prop.stringPropertyNames();
			 for (String Property : propertyNames) {
				 System.out.println("Replacing "+Property+" with "+ prop.getProperty(Property));
				 jsonStr = jsonStr.replaceAll("\""+Property+"\"", "\""+prop.getProperty(Property)+"\"");
			 }
		 } catch (FileNotFoundException e) {
//			 	jsonStr +="{\"error\":\"no data found\"}";
		 } catch (IOException e) {
//			 	jsonStr +="{\"error\":\"no data found\"}";
		 } catch (Exception e) {
//			 	jsonStr +="{\"error\":\"no data found\"}";
		 }
		 return jsonStr;
	}
	 
	
	private StringBuffer makePolygonLayer(String layer, HttpServletRequest request)
	{
		StringBuffer jsonStr = new StringBuffer("[");

		
		
		return jsonStr;
	}
}